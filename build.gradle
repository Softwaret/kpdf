buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "io.gitlab.arturbosch.detekt" version "1.11.0-RC1"
    id "org.jlleitschuh.gradle.ktlint" version "10.0.0"
    id "org.jetbrains.dokka" version "0.10.1"
    id "jacoco"
}

apply plugin: 'kotlin'
apply plugin: 'application'

group 'com.softwaret'
version '0.0.1'
mainClassName = "io.ktor.server.netty.EngineMain"

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ["-Xinline-classes", "-Xopt-in=kotlin.contracts.ExperimentalContracts"]
    }
}
tasks.detekt.jvmTarget = "1.8"

sourceSets {
    main.kotlin.srcDirs = main.java.srcDirs = ['src']
    test.kotlin.srcDirs = test.java.srcDirs = ['test']
    main.resources.srcDirs = ['resources']
    test.resources.srcDirs = ['testresources']
}

repositories {
    mavenLocal()
    jcenter()
    maven { url 'https://kotlin.bintray.com/ktor' }
    maven { url 'https://kotlin.bintray.com/kotlin-js-wrappers' }
}

dependencies {

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // Ktor
    implementation "io.ktor:ktor-server-netty:$ktor_version"
    implementation "io.ktor:ktor-server-core:$ktor_version"
    implementation "io.ktor:ktor-client-core:$ktor_version"
    implementation "io.ktor:ktor-client-core-jvm:$ktor_version"
    implementation "io.ktor:ktor-client-apache:$ktor_version"
    implementation "io.ktor:ktor-jackson:$ktor_version"
    implementation "io.ktor:ktor-locations:$ktor_version"

    // Log
    implementation "ch.qos.logback:logback-classic:$logback_version"

    // Log in non framework classes
    implementation "io.github.microutils:kotlin-logging:$micro_logger_version"

    // Kodein DI
    implementation "org.kodein.di:kodein-di-framework-ktor-server-jvm:$kodein_version"

    // Exposed SQL
    implementation "org.jetbrains.exposed:exposed:$exposed_version"

    // JWT tokens
    implementation "io.ktor:ktor-auth-jwt:$ktor_version"

    // Detekt
    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:$detekt_version"

    // Tests
    testImplementation "io.ktor:ktor-server-tests:$ktor_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit5:$kotlin_version"
    testImplementation "io.mockk:mockk:$mockk_version"
    testImplementation(platform('org.junit:junit-bom:5.6.2'))
    testImplementation('org.junit.jupiter:junit-jupiter')
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }
    finalizedBy jacocoTestReport
}

detekt {
    input = files(rootProject.rootDir)
    buildUponDefaultConfig = true
    config.setFrom(files("$rootDir/resources/detekt.yml"))
    autoCorrect = true
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/dokka"
}

jacoco {
    toolVersion = "0.8.6"
    reportsDirectory = file("$buildDir/reports")
}

jacocoTestReport {
    reports {
        xml.enabled = true
    }
}